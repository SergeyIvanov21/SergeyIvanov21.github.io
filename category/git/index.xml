<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Git | Academic</title>
    <link>http://localhost:1313/category/git/</link>
      <atom:link href="http://localhost:1313/category/git/index.xml" rel="self" type="application/rss+xml" />
    <description>Git</description>
    <generator>Hugo Blox Builder (https://hugoblox.com)</generator><language>en-us</language><lastBuildDate>Sat, 04 Mar 2023 00:00:00 +0000</lastBuildDate>
    <image>
      <url>http://localhost:1313/media/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_3.png</url>
      <title>Git</title>
      <link>http://localhost:1313/category/git/</link>
    </image>
    
    <item>
      <title>Управление версиями. Git.</title>
      <link>http://localhost:1313/post/git/</link>
      <pubDate>Sat, 04 Mar 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/git/</guid>
      <description>&lt;h2 id=&#34;что-такое-git&#34;&gt;Что такое Git&lt;/h2&gt;
&lt;p&gt;Git — это специальная программа, которая позволяет отслеживать любые изменения в файлах, хранить их версии и оперативно возвращаться в любое сохранённое состояние.&lt;/p&gt;
&lt;p&gt;Большинство других систем контроля версий хранят информацию в виде списка изменений в файлах. Git работает иначе — он хранит скорее набор снимков — полное отображение того, как выглядит файл в момент сохранения. Это позволяет всегда иметь полную информацию обо всех файлах и быстро восстанавливать любую из предыдущих версий.&lt;/p&gt;
&lt;p&gt;Рассмотрим, как это работает, на примере.&lt;/p&gt;
&lt;p&gt;Есть проект, в котором пишется код. В нём создано окружение Git ― все изменения файлов отслеживаются в рамках настроенных параметров и заданных фильтров. Нужно добавить в проект новую функцию, изменив или доработав существующий код. Для этого потребуется создать внутри проекта отдельную ветку — в Git они называются branch. Работа в этой ветке никак не затрагивает основной код — если с новыми изменениями что-то пойдёт не так и код станет невалидным и перестанет запускаться, основной проект не пострадает. А когда новая функция будет дописана и протестирована, ветку можно будет «наложить» на основной код.&lt;/p&gt;
&lt;p&gt;Также в рамках Git можно объединять разные версии кода в один. Например, над проектом трудится несколько программистов, и каждый разрабатывает или изменяет код в собственных ветках. В конце работы появится необходимость слить ветки вместе — и получается цельная программа. Это значительно облегчает совместную работу, так как не нужно ждать, пока другой разработчик допишет код, — можно работать параллельно.&lt;/p&gt;
&lt;p&gt;Если же в одной из веток разработка пойдёт не по плану и произойдёт ошибка — всё можно просто откатить до предыдущей ветки в системе контроля версий Git, где ошибок не было. И начать разработку заново.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;Визуально ветки можно представить так&#34; srcset=&#34;
               /post/git/bran_huab0a8266d5c3fb6c5c1b67b712f117f0_45037_ff55390346f2db9487e23852a7ae7cfd.webp 400w,
               /post/git/bran_huab0a8266d5c3fb6c5c1b67b712f117f0_45037_a3af2bc3a18b7b4bd83408db1bd8ad48.webp 760w,
               /post/git/bran_huab0a8266d5c3fb6c5c1b67b712f117f0_45037_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;http://localhost:1313/post/git/bran_huab0a8266d5c3fb6c5c1b67b712f117f0_45037_ff55390346f2db9487e23852a7ae7cfd.webp&#34;
               width=&#34;760&#34;
               height=&#34;372&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;git-может-быть-локальным-централизованным-или-распределённым&#34;&gt;Git может быть локальным, централизованным или распределённым:&lt;/h2&gt;
&lt;p&gt;● &lt;strong&gt;Локальный&lt;/strong&gt; установлен на одном компьютере и хранит файлы только в одном экземпляре в рамках настроенного окружения — подходит, если программист пишет код в одиночку.&lt;/p&gt;
&lt;p&gt;● &lt;strong&gt;Централизованный&lt;/strong&gt; находится на общем севере и хранит все файлы на нем.&lt;/p&gt;
&lt;p&gt;● &lt;strong&gt;Распределённый хранит&lt;/strong&gt; данные и в общем облачном хранилище, и в устройствах участников команды.&lt;/p&gt;
&lt;p&gt;Распределённая система лучше всего подходит для командной работы. Даже если с центральным хранилищем что-то случится, проект можно восстановить из копий участников команды.&lt;/p&gt;
&lt;p&gt;Удобство и гибкость сделали Git стандартом для большинства современных IT-компаний. Поэтому умение работать с ним критично для любого программиста.&lt;/p&gt;
&lt;h2 id=&#34;принципы-работы-с-git&#34;&gt;Принципы работы с Git&lt;/h2&gt;
&lt;p&gt;При работе с Git в среде разработчиков принято руководствоваться тремя принципами:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Регулярно коммитить ― сохранять изменения в Git. Такой подход позволит сохранять более подробную историю версий и быстро замечать ошибки в коде.&lt;/li&gt;
&lt;li&gt;Создавать новые ветки. Они позволяют легко управлять изменениями, особенно параллельными. Лучше создать ещё одну ветку, чем что-то испортить в старой.&lt;/li&gt;
&lt;li&gt;Чётко и лаконично описывать коммиты. Изменения кода, которые отправляются в Git, обязательно должны содержать пояснения и комментарии по добавленным правкам, доработкам и изменениям. Это значительно облегчает совместную работу и помогает быстрее разбираться в своем старом коде.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;начало-работы-с-git-установка-и-настройка&#34;&gt;Начало работы с Git: установка и настройка&lt;/h2&gt;
&lt;p&gt;Установить систему контроля версий Git можно по алгоритму:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Перейти на страницу загрузки Git.&lt;/li&gt;
&lt;li&gt;Скачать дистрибутив для нужной операционной системы.&lt;/li&gt;
&lt;li&gt;Запустить установочный файл и следовать инструкциям на экране.&lt;/li&gt;
&lt;li&gt;После завершения установки открыть терминал или командную строку и ввести команду git &amp;ndash;version. Если Git правильно установлен, отобразится версия Git.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Это схема для установки Git локально. Для серверов алгоритм в целом такой же, но потребуется ещё настроить взаимодействие с локальными устройствами — но это уже работа системного администратора.&lt;/p&gt;
&lt;p&gt;Также для работы потребуется создать репозиторий в Git. Это можно сделать по схеме:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Создать пустую директорию на диске.&lt;/li&gt;
&lt;li&gt;Перейти в созданную папку и запустить терминал.&lt;/li&gt;
&lt;li&gt;Инициализировать репозиторий командой git init. После выполнения этой команды в директории появится скрытая папка .git&lt;/li&gt;
&lt;li&gt;Добавить в репозиторий файлы командой git add. После указанной команды выбранные файлы перейдут в статус «отслеживаемых» и можно будет увидеть производимые с ними изменения ― удаление, перемещение, переименование и изменения содержимого файлов.&lt;/li&gt;
&lt;li&gt;Создать первый коммит командой git commit -m &amp;ldquo;Initial commit&amp;rdquo;.&lt;/li&gt;
&lt;li&gt;Создать ветку в Git командой git branch &amp;lt;название_ветки&amp;gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Чтобы полностью понять, как использовать Git, нужно изучить все его основные команды. Это можно сделать в документации.&lt;/p&gt;
&lt;p&gt;«Джентльменским набором» для работы в Git можно считать набор команд:&lt;/p&gt;
&lt;p&gt;●	git commit — фиксация изменений&lt;/p&gt;
&lt;p&gt;●	git diff — просмотр актуальных или предыдущих изменений в рамках работы над репозиторием&lt;/p&gt;
&lt;p&gt;●	git checkout — переход на предыдущее состояние или ветку&lt;/p&gt;
&lt;p&gt;●	git push/pull — отправка и получение изменений из удалённого репозитория&lt;/p&gt;
&lt;p&gt;●	git stash — сохранение изменений в архив для последующего использования&lt;/p&gt;
&lt;h2 id=&#34;что-такое-репозиторий-git&#34;&gt;Что такое репозиторий Git&lt;/h2&gt;
&lt;p&gt;Репозиторий — это место, в котором хранится весь код и вся история его изменений. По сути это просто папка, однако она связана с Git напрямую и содержит файлы в понятном для Git формате. Кроме того, для папки, заявленной как репозиторий, Git формирует историю изменений.&lt;/p&gt;
&lt;p&gt;Репозиторий может быть локальным ― храниться на компьютере пользователя. А может быть удалённым — лежать на сервере или в облачном хранилище. В таком случае пользователи со своих устройств подключаются к этому репозиторию через интернет.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;Интерфейс GitHub&#34; srcset=&#34;
               /post/git/ui_hu2310f9d80e5c3f69ea4fc7d27c8a945f_53582_f23cf6e008ac09b7a00bdc5bff931685.webp 400w,
               /post/git/ui_hu2310f9d80e5c3f69ea4fc7d27c8a945f_53582_8dd9f9fb089126c31456476f802fc80f.webp 760w,
               /post/git/ui_hu2310f9d80e5c3f69ea4fc7d27c8a945f_53582_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;http://localhost:1313/post/git/ui_hu2310f9d80e5c3f69ea4fc7d27c8a945f_53582_f23cf6e008ac09b7a00bdc5bff931685.webp&#34;
               width=&#34;760&#34;
               height=&#34;367&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
